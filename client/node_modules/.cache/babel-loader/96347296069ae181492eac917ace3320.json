{"ast":null,"code":"import { UPDATE_PRODUCTS, UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY, ADD_TO_CART, ADD_MULTIPLE_TO_CART, REMOVE_FROM_CART, UPDATE_CART_QUANTITY, CLEAR_CART, TOGGLE_CART } from './actions';\nimport { useReducer } from 'react';\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n    case UPDATE_PRODUCTS:\n      return { ...state,\n        products: [...action.products]\n      };\n    // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n\n    case UPDATE_CATEGORIES:\n      return { ...state,\n        categories: [...action.categories]\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return { ...state,\n        currentCategory: action.currentCategory\n      };\n\n    case ADD_TO_CART:\n      return { ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product]\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      return { ...state,\n        cart: [...state.cart, ...action.products]\n      };\n\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n      return { ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n\n    case UPDATE_CART_QUANTITY:\n      return { ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n\n          return product;\n        })\n      };\n\n    case CLEAR_CART:\n      return { ...state,\n        cartOpen: false,\n        cart: []\n      };\n\n    case TOGGLE_CART:\n      return { ...state,\n        cartOpen: !state.cartOpen\n      };\n    // if it's none of these actions, do not update state at all and keep things the same!\n\n    default:\n      return state;\n  }\n};\nexport function useProductReducer(initialState) {\n  return useReducer(reducer, initialState);\n}","map":{"version":3,"sources":["/Users/ericwebber/Desktop/projects/shop-shop/client/src/utils/reducers.js"],"names":["UPDATE_PRODUCTS","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","CLEAR_CART","TOGGLE_CART","useReducer","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","_id","length","map","purchaseQuantity","useProductReducer","initialState"],"mappings":"AAAA,SACEA,eADF,EAEEC,iBAFF,EAGEC,uBAHF,EAIEC,WAJF,EAKEC,oBALF,EAMEC,gBANF,EAOEC,oBAPF,EAQEC,UARF,EASEC,WATF,QAUO,WAVP;AAYA,SAASC,UAAT,QAA2B,OAA3B;AAEE,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACxC,UAAQA,MAAM,CAACC,IAAf;AACE;AACA,SAAKb,eAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELG,QAAAA,QAAQ,EAAE,CAAC,GAAGF,MAAM,CAACE,QAAX;AAFL,OAAP;AAIA;;AACA,SAAKb,iBAAL;AACI,aAAO,EACP,GAAGU,KADI;AAEPI,QAAAA,UAAU,EAAE,CAAC,GAAGH,MAAM,CAACG,UAAX;AAFL,OAAP;;AAIJ,SAAKb,uBAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHK,QAAAA,eAAe,EAAEJ,MAAM,CAACI;AAFrB,OAAP;;AAIJ,SAAKb,WAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELM,QAAAA,QAAQ,EAAE,IAFL;AAGLC,QAAAA,IAAI,EAAE,CAAC,GAAGP,KAAK,CAACO,IAAV,EAAgBN,MAAM,CAACO,OAAvB;AAHD,OAAP;;AAMF,SAAKf,oBAAL;AACI,aAAO,EACL,GAAGO,KADE;AAELO,QAAAA,IAAI,EAAE,CAAC,GAAGP,KAAK,CAACO,IAAV,EAAgB,GAAGN,MAAM,CAACE,QAA1B;AAFD,OAAP;;AAIJ,SAAKT,gBAAL;AACM,UAAIe,QAAQ,GAAGT,KAAK,CAACO,IAAN,CAAWG,MAAX,CAAkBF,OAAO,IAAI;AAC1C,eAAOA,OAAO,CAACG,GAAR,KAAgBV,MAAM,CAACU,GAA9B;AACD,OAFc,CAAf;AAIA,aAAO,EACL,GAAGX,KADE;AAELM,QAAAA,QAAQ,EAAEG,QAAQ,CAACG,MAAT,GAAkB,CAFvB;AAGLL,QAAAA,IAAI,EAAEE;AAHD,OAAP;;AAKN,SAAKd,oBAAL;AACM,aAAO,EACH,GAAGK,KADA;AAEHM,QAAAA,QAAQ,EAAE,IAFP;AAGHC,QAAAA,IAAI,EAAEP,KAAK,CAACO,IAAN,CAAWM,GAAX,CAAeL,OAAO,IAAI;AAC9B,cAAIP,MAAM,CAACU,GAAP,KAAeH,OAAO,CAACG,GAA3B,EAAgC;AAC9BH,YAAAA,OAAO,CAACM,gBAAR,GAA2Bb,MAAM,CAACa,gBAAlC;AACD;;AACD,iBAAON,OAAP;AACD,SALK;AAHH,OAAP;;AAWN,SAAKZ,UAAL;AACM,aAAO,EACL,GAAGI,KADE;AAEDM,QAAAA,QAAQ,EAAE,KAFT;AAGDC,QAAAA,IAAI,EAAE;AAHL,OAAP;;AAKJ,SAAKV,WAAL;AACM,aAAO,EACL,GAAGG,KADE;AAEHM,QAAAA,QAAQ,EAAE,CAACN,KAAK,CAACM;AAFd,OAAP;AAIV;;AACA;AACE,aAAON,KAAP;AAjEJ;AAmED,CApEM;AAsET,OAAO,SAASe,iBAAT,CAA2BC,YAA3B,EAAyC;AAC5C,SAAOlB,UAAU,CAACC,OAAD,EAAUiB,YAAV,CAAjB;AACD","sourcesContent":["import {\n  UPDATE_PRODUCTS,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  ADD_TO_CART,\n  ADD_MULTIPLE_TO_CART,\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  CLEAR_CART,\n  TOGGLE_CART\n} from './actions';\n\nimport { useReducer } from 'react'; \n\n  export const reducer = (state, action) => {\n    switch (action.type) {\n      // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n      case UPDATE_PRODUCTS:\n        return {\n          ...state,\n          products: [...action.products],\n        };\n        // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n        case UPDATE_CATEGORIES:\n            return {\n            ...state,\n            categories: [...action.categories]\n            };\n        case UPDATE_CURRENT_CATEGORY:\n            return {\n                ...state,\n                currentCategory: action.currentCategory\n            };\n        case ADD_TO_CART:\n          return {\n            ...state,\n            cartOpen: true,\n            cart: [...state.cart, action.product]\n          };\n\n        case ADD_MULTIPLE_TO_CART:\n            return {\n              ...state,\n              cart: [...state.cart, ...action.products],\n            };\n        case REMOVE_FROM_CART:\n              let newState = state.cart.filter(product => {\n                return product._id !== action._id;\n              });\n            \n              return {\n                ...state,\n                cartOpen: newState.length > 0,\n                cart: newState\n              };\n        case UPDATE_CART_QUANTITY:\n              return {\n                  ...state,\n                  cartOpen: true,\n                  cart: state.cart.map(product => {\n                    if (action._id === product._id) {\n                      product.purchaseQuantity = action.purchaseQuantity;\n                    }\n                    return product;\n                  })\n                };\n\n        case CLEAR_CART:\n              return {\n                ...state,\n                    cartOpen: false,\n                    cart: []\n                  };\n          case TOGGLE_CART:\n                return {\n                  ...state,\n                    cartOpen: !state.cartOpen\n                  };\n      // if it's none of these actions, do not update state at all and keep things the same!\n      default:\n        return state;\n    }\n  };\n\nexport function useProductReducer(initialState) {\n    return useReducer(reducer, initialState);\n  }\n"]},"metadata":{},"sourceType":"module"}